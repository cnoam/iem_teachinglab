# Custom script to extract email adddresses from a CSV exported from moodle, then manually decimated
import csv

def convert_csv(input_file, output_file):
  """
  Converts a CSV file with user emails in specific format to a new CSV with 
  columns "user1", "user2", etc.
  the CSV is generated by exporting Moodle Group using Moodle 2024

  Args:
    input_file: Path to the input CSV file.
    output_file: Path to the output CSV file.
  """

  def generate_output_headers(N: int):
    # Generate a list of usernames
    users = [f"user{i}" for i in range(1, N + 1)]
    # Join the list into a single string with commas
    return ", ".join(users)

  max_users_in_group = 4
  with open(input_file, 'r', newline='') as infile, open(output_file, 'w', newline='') as outfile:

    first_line = infile.readline()
    if not first_line.startswith('sep='):
      input_file.seek(0)

    reader = csv.DictReader(infile)

    # write needed column headers
    outfile.write(generate_output_headers(max_users_in_group))
    outfile.write('\n')
    writer = csv.writer(outfile)

    #print(reader.fieldnames)
    for row in reader:
      # Extract email addresses from member columns
      users = [] # i.e. group members
      for i in range(max_users_in_group):
        col_name = f'Member {i+1} Email'
        member_email = row.get(col_name) # might not exist
        if member_email is None:
          users.append(f'')
        else: users.append(row[col_name])

      # Write user emails to a new row
      if any((u for u in users)): # skip empty rows
        print(users)
        writer.writerow(users)

if __name__ == '__main__':
  import sys
  if len(sys.argv) != 2:
    print(f"usage: {sys.argv[0]} input_moodle_group.csv")
    exit(0)
  input_file = sys.argv[1]
  
  output_file = 'users.csv'  # Replace with your desired output file path
  convert_csv(input_file, output_file)
  print(f'Converted CSV file saved to: {output_file}')